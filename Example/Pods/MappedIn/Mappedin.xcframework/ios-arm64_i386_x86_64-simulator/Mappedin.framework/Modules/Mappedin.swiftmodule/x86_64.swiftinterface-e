// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mappedin
import CoreLocation
import Darwin
import Foundation
import GLKit
@_exported import Mappedin
import Metal
import MetalKit
import SceneKit
import Swift
import UIKit
import Darwin.C.stdatomic
public class Polygon : Mappedin.Navigatable, Mappedin.Focusable, Mappedin.Deserializable {
  public var defaultColor: UIKit.UIColor {
    get
  }
  weak public var venue: Mappedin.Venue? {
    get
    set
  }
  public var map: Mappedin.Map {
    get
  }
  public var locations: [Mappedin.Location] {
    get
  }
  public var entrances: [Mappedin.Coordinate] {
    get
  }
  public var navigatableCoordinates: [Mappedin.Coordinate] {
    get
  }
  public var geometryHeight: Swift.Float {
    get
  }
  public var focusPoints: Mappedin.FocusPoints {
    get
  }
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  public func link(with venue: Mappedin.Venue)
  @objc deinit
}
extension Polygon : Swift.Equatable {
  public static func == (lhs: Mappedin.Polygon, rhs: Mappedin.Polygon) -> Swift.Bool
}
extension Polygon : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias Radians = Swift.Float
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MapView : UIKit.UIView {
  @objc override public static var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  public var delegate: Mappedin.MapViewDelegate?
  public var activeMap: Mappedin.Map? {
    get
    set(map)
  }
  public var storeLabelsEnable: Swift.Bool {
    get
    set(value)
  }
  public var storeLabelsDefaultFont: UIKit.UIFontDescriptor {
    get
    set(value)
  }
  public var storeLablesDefaultColor: UIKit.UIColor {
    get
    set(value)
  }
  public var cameraBounds: Mappedin.CameraBounds
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  public func add(_ element: Mappedin.Element)
  public func remove(_ element: Mappedin.Element)
  public func setBackgroundColor(color: UIKit.UIColor)
  public func setColor(of polygon: Mappedin.Polygon, to color: UIKit.UIColor, over animationInterval: Foundation.TimeInterval)
  public func setHeight(of polygon: Mappedin.Polygon, to height: Swift.Float, over animationInterval: Foundation.TimeInterval)
  public func setStoreLabelColor(of polygon: Mappedin.Polygon, to: UIKit.UIColor)
  public func resetStoreLabelColor(of polygon: Mappedin.Polygon)
  public func setMap(_ map: Mappedin.Map)
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public func polygonsInView() -> Swift.Set<Mappedin.Polygon>
  public func locationsInView() -> Swift.Set<Mappedin.Location>
  public func isInView(polygon: Mappedin.Polygon) -> Swift.Bool
  public func isInView(location: Mappedin.Location) -> Swift.Bool
  @objc deinit
}
final public class TextOverlay : Mappedin.ImageOverlay {
  public init<PositionType>(position: PositionType, label: UIKit.UILabel, size: CoreGraphics.CGSize? = nil, anchorPoint: Mappedin.AnchorPoint = .center, minimumTouchSize: CoreGraphics.CGSize? = nil) where PositionType : Mappedin.Position
  @objc deinit
  override public init<PositionType>(position: PositionType, image: UIKit.UIImage, size: CoreGraphics.CGSize? = super, anchorPoint: Mappedin.AnchorPoint = super, minimumTouchSize: CoreGraphics.CGSize? = super) where PositionType : Mappedin.Position
}
extension MapView {
  public var cameraHeading: Mappedin.Radians {
    get
  }
  public var cameraTilt: Mappedin.Radians {
    get
  }
  public func frame(_ focusable: Mappedin.Focusable, padding: Swift.Float = 0, heading: Mappedin.Radians, tilt: Mappedin.Radians, over animationInterval: Foundation.TimeInterval, minimumSize: Swift.Float = 25)
  public func frame(_ focusable: [Mappedin.Focusable], padding: Swift.Float = 0, heading: Mappedin.Radians, tilt: Mappedin.Radians, over animationInterval: Foundation.TimeInterval, minimumSize: Swift.Float = 25)
}
public struct CameraBounds {
  public var center: Mappedin.Vector2?
  public var radius: Swift.Float?
  public var maxHeight: Swift.Float
  public var minHeight: Swift.Float
}
@_hasMissingDesignatedInitializers public class ImageOverlay : Mappedin.Element {
  public var vector: Mappedin.Vector3 {
    get
  }
  public var map: Mappedin.Map? {
    get
  }
  public var coordinate: Mappedin.Coordinate? {
    get
  }
  public init<PositionType>(position: PositionType, image: UIKit.UIImage, size: CoreGraphics.CGSize? = nil, anchorPoint: Mappedin.AnchorPoint = .center, minimumTouchSize: CoreGraphics.CGSize? = nil) where PositionType : Mappedin.Position
  @objc deinit
  public func set(position: Mappedin.Vector3, over animationInterval: Foundation.TimeInterval = 0)
  public func set(position: Mappedin.Coordinate, over animationInterval: Foundation.TimeInterval = 0)
}
public protocol Position {
  var vector: Mappedin.Vector3 { get }
}
extension Vector3 : Mappedin.Position {
  public var vector: Mappedin.Vector3 {
    get
  }
}
extension Coordinate : Mappedin.Position {
}
public protocol Service {
  associatedtype VenueType : Mappedin.Venue
  var apiKey: Swift.String { get }
  var apiSecret: Swift.String { get }
  var dataKey: Swift.String { get }
  var searchUser: Swift.String { get }
  var searchKey: Swift.String { get }
  init()
}
extension Service {
  public var searchUser: Swift.String {
    get
  }
  public var searchKey: Swift.String {
    get
  }
}
extension Service {
  public init(_ appDelegateType: UIKit.UIApplicationDelegate.Type)
  public func getVenues() -> Mappedin.APIRequest<[Mappedin.VenueListing]>
  public func getVenue(_ venueListing: Mappedin.VenueListing, languageCode: Swift.String? = nil) -> Mappedin.APIRequest<Self.VenueType>
}
public protocol MapViewDelegate : AnyObject {
  func tappedPolygons(polygons: [Mappedin.Polygon])
  func tapped(_ mapView: Mappedin.MapView, polygon: Mappedin.Polygon) -> Swift.Bool
  func tapped(_ mapView: Mappedin.MapView, element: Mappedin.Element) -> Swift.Bool
  func tapped(_ mapView: Mappedin.MapView, clCoordinate: CoreLocation.CLLocationCoordinate2D)
  func manipulatedCamera()
}
extension MapViewDelegate {
  public func tappedPolygons(polygons: [Mappedin.Polygon])
  public func tapped(_ mapView: Mappedin.MapView, polygon: Mappedin.Polygon) -> Swift.Bool
  public func tapped(_ mapView: Mappedin.MapView, element: Mappedin.Element) -> Swift.Bool
  public func tapped(_ mapView: Mappedin.MapView, clCoordinate: CoreLocation.CLLocationCoordinate2D)
  public func manipulatedCamera()
}
public struct Vector2 : Mappedin.Deserializable {
  public let x: Swift.Float
  public let y: Swift.Float
  public init()
  public init(_ x: Swift.Float, _ y: Swift.Float)
  public init(x: Swift.Float, y: Swift.Float)
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
  public var lengthSquared: Swift.Float {
    get
  }
  public var length: Swift.Float {
    get
  }
  public var normalized: Mappedin.Vector2 {
    get
  }
  public func angle() -> Swift.Float
  public func angle(to: Mappedin.Vector2) -> Swift.Float
}
public func + (lhs: Mappedin.Vector2, rhs: Mappedin.Vector2) -> Mappedin.Vector2
public func - (lhs: Mappedin.Vector2, rhs: Mappedin.Vector2) -> Mappedin.Vector2
public func * (vector: Mappedin.Vector2, multiplier: Swift.Float) -> Mappedin.Vector2
public func == (lhs: Mappedin.Vector2, rhs: Mappedin.Vector2) -> Swift.Bool
@_hasMissingDesignatedInitializers open class Location : Mappedin.Deserializable {
  final public let type: Swift.String
  final public let name: Swift.String
  public var polygons: Swift.AnySequence<Mappedin.Polygon> {
    get
  }
  public var coordinates: Swift.AnySequence<Mappedin.Coordinate> {
    get
  }
  public var categories: Swift.AnySequence<Mappedin.Category> {
    get
  }
  weak public var venue: Mappedin.Venue? {
    get
    set
  }
  public var hashValue: Swift.Int {
    get
  }
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  open func link(with venue: Mappedin.Venue)
  @objc deinit
}
extension Location : Mappedin.Navigatable {
  public var navigatableCoordinates: [Mappedin.Coordinate] {
    get
  }
}
extension Location : Swift.Equatable {
  public static func == (lhs: Mappedin.Location, rhs: Mappedin.Location) -> Swift.Bool
}
extension Location : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
public struct PhoneNumber : Mappedin.Deserializable {
  public let number: Swift.String
  public let ext: Swift.String
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
}
public protocol Deserializable {
  init(from buffer: inout Mappedin.BinaryDecoder) throws
}
extension Deserializable {
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
}
extension UInt8 : Mappedin.Deserializable {
}
extension UInt16 : Mappedin.Deserializable {
}
extension UInt32 : Mappedin.Deserializable {
}
extension UInt64 : Mappedin.Deserializable {
}
extension Int8 : Mappedin.Deserializable {
}
extension Int16 : Mappedin.Deserializable {
}
extension Int32 : Mappedin.Deserializable {
}
extension Int64 : Mappedin.Deserializable {
}
extension Float : Mappedin.Deserializable {
}
extension Double : Mappedin.Deserializable {
}
extension Bool : Mappedin.Deserializable {
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
}
extension String : Mappedin.Deserializable {
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
}
public enum DeserializableError : Swift.Error {
  case outOfSpace
  case utf8DecodingError
  public static func == (a: Mappedin.DeserializableError, b: Mappedin.DeserializableError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers final public class Path : Mappedin.Element, Mappedin.Focusable {
  final public var width: Swift.Float {
    get
  }
  final public var height: Swift.Float {
    get
  }
  final public var color: UIKit.UIColor {
    get
  }
  final public var pulseColor: UIKit.UIColor {
    get
  }
  final public var pulseLimit: Swift.Optional<Swift.Int> {
    get
  }
  final public var pulseEnabled: Swift.Bool {
    get
  }
  final public var pulseTime: Swift.Float {
    get
  }
  final public var focusPoints: Mappedin.FocusPoints {
    get
  }
  public init(points: [Mappedin.Coordinate], width: Swift.Float, height: Swift.Float, color: UIKit.UIColor, pulseEnabled: Swift.Bool = false, pulseColor: UIKit.UIColor = UIColor.white, pulseLimit: Swift.Optional<Swift.Int> = 10, pulseTime: Swift.Float = 2.0)
  @objc deinit
}
public struct NavigationGraph {
}
public protocol Search {
  var delegate: Mappedin.SearchDelegate? { get set }
  func suggest(query: Swift.String, timeout: Foundation.TimeInterval)
  func search(query: Swift.String, page: Swift.Int, timeout: Foundation.TimeInterval)
}
public enum SearchResultType {
  case location(Mappedin.Location)
}
public struct SearchResult {
  public let value: Mappedin.SearchResultType
}
public struct SearchPagination {
  public let total: Swift.Int
  public let page: Swift.Int
  public let pageSize: Swift.Int
}
public protocol SearchDelegate {
  func search(query: Swift.String, suggestions: [Swift.String])
  func search(query: Swift.String, pagination: Mappedin.SearchPagination, results: [Mappedin.SearchResult])
  func search(error: Mappedin.SearchError)
}
public enum SearchError {
  case missingCredentials
  case accessDenied
  case decodingError
  case unknownError(Swift.Error)
}
@_hasMissingDesignatedInitializers final public class Cylinder : Mappedin.Element, Mappedin.Focusable {
  final public var diameter: Swift.Float {
    get
  }
  final public var height: Swift.Float {
    get
  }
  final public var color: UIKit.UIColor {
    get
  }
  final public var focusPoints: Mappedin.FocusPoints {
    get
  }
  final public var vector: Mappedin.Vector3 {
    get
  }
  final public var map: Mappedin.Map? {
    get
  }
  final public var coordinate: Mappedin.Coordinate? {
    get
  }
  public init<PositionType>(position: PositionType, diameter: Swift.Float, height: Swift.Float, color: UIKit.UIColor) where PositionType : Mappedin.Position
  final public func set(diameter: Swift.Float? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  final public func set(position: Mappedin.Vector3, diameter: Swift.Float? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  final public func set(position: Mappedin.Coordinate, diameter: Swift.Float? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Cylinder.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setPosition(to position: Mappedin.Vector3, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Cylinder.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setPosition(to position: Mappedin.Coordinate, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Cylinder.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setDiameter(to diameter: Swift.Float, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Cylinder.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setHeight(to height: Swift.Float, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Cylinder.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setColor(to color: UIKit.UIColor, over animationInterval: Foundation.TimeInterval)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Connection : Mappedin.Location {
  final public let accessible: Swift.Bool
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  @objc deinit
}
public protocol MappedinSearch {
  var delegate: Mappedin.MappedinSearchDelegate? { get set }
  func search(query: Swift.String)
}
public struct MappedinSearchLocation {
}
public struct MappedinSearchCategory {
}
public enum MappedinSearchResultType {
  case location(Mappedin.Location)
  case category(Mappedin.Category)
}
public struct MappedinSearchResult {
  public let value: Mappedin.MappedinSearchResultType
}
public protocol MappedinSearchDelegate {
  func search(query: Swift.String, results: [Mappedin.MappedinSearchResult])
  func search(error: Mappedin.MappedinSearchError)
}
public enum MappedinSearchError {
  case missingCredentials
  case accessDenied
  case decodingError
  case unknownError(Swift.Error)
}
public struct ImageSet : Mappedin.Deserializable {
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
  public subscript(size: Swift.Int) -> Foundation.URL {
    get
  }
}
public struct Analytics {
  public static func selectedLocation(_ location: Mappedin.Location)
  public static func selectedCategory(_ category: Mappedin.Category)
  public static func startedWayfindTo(_ location: Mappedin.Location) -> Mappedin.Analytics.Wayfind
  @_hasMissingDesignatedInitializers public class Wayfind {
    public func successful()
    @objc deinit
  }
}
public enum HttpError : Swift.Error {
  case requestError(Swift.Error)
  case missingData
  case requestTimeout
  case invalidJSON(Swift.Error)
  case invalidJSONSchemea
  case httpErrorCode(Swift.Int)
  case deserializableError(Mappedin.DeserializableError)
  public var localizedDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Map : Mappedin.Focusable, Mappedin.Deserializable {
  final public let id: Swift.String
  final public let name: Swift.String
  final public let shortName: Swift.String
  final public let floor: Swift.Int
  final public let heading: Swift.Float
  weak public var venue: Mappedin.Venue? {
    get
    set
  }
  public var polygons: [Mappedin.Polygon] {
    get
  }
  public var focusPoints: Mappedin.FocusPoints {
    get
  }
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  @objc deinit
}
extension Map : Swift.Equatable {
  public static func == (lhs: Mappedin.Map, rhs: Mappedin.Map) -> Swift.Bool
}
public struct SrcDst : Swift.Hashable {
  public static func == (lhs: Mappedin.SrcDst, rhs: Mappedin.SrcDst) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension NavigationGraph {
  public func buildNetwork(locations: [Mappedin.Coordinate]) -> [Mappedin.SrcDst : Swift.Float32]
}
@_hasMissingDesignatedInitializers public class Element {
  @objc deinit
}
extension Element : Swift.Equatable {
  public static func == (lhs: Mappedin.Element, rhs: Mappedin.Element) -> Swift.Bool
}
extension Element : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PathSolverDelegate : AnyObject {
  func pathSolver(solver: Mappedin.PathSolver, solution: [Mappedin.Polygon])
  func pathSolver(solver: Mappedin.PathSolver, bestSolution: [Mappedin.Polygon])
  func pathSolver(solver: Mappedin.PathSolver, error: Mappedin.PathSolverError)
}
public enum PathSolverError : Swift.Error {
  case UnroutablePolygons([Mappedin.Polygon])
}
public class PathSolver {
  final public let venue: Mappedin.Venue
  weak public var delegate: Mappedin.PathSolverDelegate?
  public init(venue: Mappedin.Venue)
  public func start(origin: Mappedin.Polygon, toVisit: [Mappedin.Polygon], willExpire: Swift.Set<Mappedin.Polygon> = Set(), expireTime: Swift.Float = 10 * 60)
  public func stop()
  @objc deinit
}
public struct Directions {
  public let path: [Mappedin.Coordinate]
  public let instructions: [Mappedin.Directions.Instruction]
  public let distance: Swift.Float
}
extension Directions {
  public struct Instruction {
    public typealias Action = Mappedin.DirectionsInstructionAction
    public struct Departure : Mappedin.Directions.Instruction.Action {
    }
    public struct Arrival : Mappedin.Directions.Instruction.Action {
    }
    public struct Turn : Mappedin.Directions.Instruction.Action {
      public enum Bearing {
        case left
        case slightLeft
        case straight
        case slightRight
        case right
        public static func == (a: Mappedin.Directions.Instruction.Turn.Bearing, b: Mappedin.Directions.Instruction.Turn.Bearing) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
        public func hash(into hasher: inout Swift.Hasher)
      }
      public let relativeBearing: Mappedin.Directions.Instruction.Turn.Bearing
    }
    public struct TakeConnection : Mappedin.Directions.Instruction.Action {
      public let fromMap: Mappedin.Map
      public let toMap: Mappedin.Map
    }
    public struct ExitConnection : Mappedin.Directions.Instruction.Action {
      public let fromMap: Mappedin.Map
      public let toMap: Mappedin.Map
    }
    public let coordinate: Mappedin.Coordinate
    public let action: Mappedin.Directions.Instruction.Action
    public let atLocation: Mappedin.Location?
    public var description: Swift.String {
      get
    }
  }
}
public protocol DirectionsInstructionAction {
}
public struct Vector3 : Mappedin.Deserializable {
  public let vector2: Mappedin.Vector2
  public var x: Swift.Float {
    get
  }
  public var y: Swift.Float {
    get
  }
  public let z: Swift.Float
  public init(_ x: Swift.Float, _ y: Swift.Float, _ z: Swift.Float)
  public init(x: Swift.Float, y: Swift.Float, z: Swift.Float)
  public init(_ v: SceneKit.SCNVector3)
  public init(from buffer: inout Mappedin.BinaryDecoder) throws
}
extension Vector3 : Mappedin.Focusable {
  public var focusPoints: Mappedin.FocusPoints {
    get
  }
}
extension Vector3 : Swift.Equatable {
  public static func == (lhs: Mappedin.Vector3, rhs: Mappedin.Vector3) -> Swift.Bool
}
public class Coordinate : Mappedin.Navigatable, Mappedin.Focusable, Mappedin.Deserializable {
  public var vector2: Mappedin.Vector2 {
    get
  }
  public var x: Swift.Float {
    get
  }
  public var y: Swift.Float {
    get
  }
  public var z: Swift.Float {
    get
  }
  public var vector: Mappedin.Vector3 {
    get
  }
  weak public var venue: Mappedin.Venue? {
    get
    set
  }
  public var map: Mappedin.Map {
    get
  }
  public var navigatableCoordinates: [Mappedin.Coordinate] {
    get
  }
  public var focusPoints: Mappedin.FocusPoints {
    get
  }
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  public init(location: CoreLocation.CLLocationCoordinate2D, map: Mappedin.Map)
  public init(vector: Mappedin.Vector3, map: Mappedin.Map)
  public func toCLLocation() -> CoreLocation.CLLocationCoordinate2D
  public func meters(from coordinate: Mappedin.Coordinate) -> Swift.Float
  public func meters(from polygon: Mappedin.Polygon) -> Swift.Float
  public func meters(from path: [Mappedin.Coordinate]) -> Swift.Float
  public func closestPointOnPathSegment(from p1: Mappedin.Vector2, to p2: Mappedin.Vector2) -> Mappedin.Coordinate
  public func isInside(_ polygon: Mappedin.Polygon) -> Swift.Bool
  @objc deinit
}
extension Coordinate : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: Mappedin.Coordinate, rhs: Mappedin.Coordinate) -> Swift.Bool
public struct VenueListing {
  public let slug: Swift.String
  public let name: Swift.String
  public let address: Swift.String
  public let city: Swift.String
  public let state: Swift.String
  public let countryCode: Swift.String
  public let postal: Swift.String
  public let defaultLanguage: Swift.String
  public let languageCodes: [Swift.String]
}
@_hasMissingDesignatedInitializers open class Venue {
  final public let slug: Swift.String
  final public let name: Swift.String
  final public let address: Swift.String
  final public let city: Swift.String
  final public let state: Swift.String
  final public let countryCode: Swift.String
  final public let postal: Swift.String
  final public let defaultLanguage: Swift.String
  final public let languageCodes: [Swift.String]
  public var maps: [Mappedin.Map]
  public var categories: [Mappedin.Category]
  public var locations: [Mappedin.Location]
  public var connections: [Mappedin.Connection]
  public var search: Mappedin.Search!
  public var mappedinSearch: Mappedin.MappedinSearch!
  required public init(inflate venueListing: Mappedin.VenueListing, with buffer: inout Mappedin.BinaryDecoder) throws
  @objc deinit
}
extension Venue : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  open var hashValue: Swift.Int {
    get
  }
}
extension Venue : Swift.Equatable {
  public static func == (lhs: Mappedin.Venue, rhs: Mappedin.Venue) -> Swift.Bool
}
public class Category : Mappedin.Deserializable {
  final public let name: Swift.String
  final public let sortOrder: Swift.Int16
  final public let color: UIKit.UIColor
  public var icon: Mappedin.ImageSet?
  public var picture: Mappedin.ImageSet?
  weak public var venue: Mappedin.Venue? {
    get
    set
  }
  public var locations: [Mappedin.Location] {
    get
  }
  public var parents: [Mappedin.Category] {
    get
  }
  public var children: [Mappedin.Category] {
    get
  }
  required public init(from buffer: inout Mappedin.BinaryDecoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Prism : Mappedin.Element, Mappedin.Focusable {
  final public var heading: Mappedin.Radians {
    get
  }
  final public var height: Swift.Float {
    get
  }
  final public var color: UIKit.UIColor {
    get
  }
  final public var focusPoints: Mappedin.FocusPoints {
    get
  }
  final public var vector: Mappedin.Vector3 {
    get
  }
  final public var map: Mappedin.Map? {
    get
  }
  final public var coordinate: Mappedin.Coordinate? {
    get
  }
  public init<PositionType>(position: PositionType, heading: Mappedin.Radians = 0, points: [Mappedin.Vector2], height: Swift.Float, color: UIKit.UIColor) where PositionType : Mappedin.Position
  final public func set(heading: Mappedin.Radians? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  final public func set(position: Mappedin.Vector3, heading: Mappedin.Radians? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  final public func set(position: Mappedin.Coordinate, heading: Mappedin.Radians? = nil, height: Swift.Float? = nil, color: UIKit.UIColor? = nil, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Prism.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setPosition(to position: Mappedin.Vector3, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Prism.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setPosition(to position: Mappedin.Coordinate, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Prism.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setHeading(to heading: Mappedin.Radians, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Prism.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setHeight(to height: Swift.Float, over animationInterval: Foundation.TimeInterval)
  @available(*, deprecated, message: "Functionally equivalent to the `Prism.set` function, and does not\nconform to the Apple's standard named conventions.")
  final public func setColor(to color: UIKit.UIColor, over animationInterval: Foundation.TimeInterval)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class APIRequest<DataType> {
  @discardableResult
  public func onComplete(_ callback: @escaping (DataType) -> Swift.Void) -> Self
  @discardableResult
  public func onError(_ callback: @escaping (Mappedin.APIRequest<DataType>.RequestError) -> Swift.Void) -> Self
  public func synchronousFetch() throws -> DataType
  public typealias RequestError = Mappedin.HttpError
  @objc deinit
}
public enum AnchorPoint {
  case center
  case top
  case topRight
  case topLeft
  case left
  case right
  case bottom
  case bottomLeft
  case bottomRight
  case custom(x: Swift.Float, y: Swift.Float)
  public func toTextureOffset() -> (x: Swift.Float, y: Swift.Float)
}
public struct BinaryDecoder {
  public mutating func pull<DeserializableType>(_ type: DeserializableType.Type) throws -> DeserializableType where DeserializableType : Mappedin.Deserializable
  public mutating func pull<DeserializableType>(_ type: [DeserializableType].Type) throws -> [DeserializableType] where DeserializableType : Mappedin.Deserializable
  public mutating func pull<DeserializableType>(_ type: DeserializableType?.Type) throws -> DeserializableType? where DeserializableType : Mappedin.Deserializable
  public mutating func pullValue<DeserializableType>() throws -> DeserializableType where DeserializableType : Mappedin.Deserializable
  public mutating func pullValue<DeserializableType>() throws -> [DeserializableType] where DeserializableType : Mappedin.Deserializable
}
public protocol Navigatable {
  var navigatableCoordinates: [Mappedin.Coordinate] { get }
}
extension Navigatable {
  public var isNavigatable: Swift.Bool {
    get
  }
}
extension Navigatable {
  public func directions<VenueNavigatable>(to destination: VenueNavigatable, accessible: Swift.Bool = false) -> Mappedin.Directions? where VenueNavigatable : Mappedin.Navigatable
  public func directions<VenueNavigatable>(from origin: VenueNavigatable, accessible: Swift.Bool = false) -> Mappedin.Directions? where VenueNavigatable : Mappedin.Navigatable
}
public protocol Focusable {
  var focusPoints: Mappedin.FocusPoints { get }
}
public struct FocusPoints {
}
extension Mappedin.DeserializableError : Swift.Equatable {}
extension Mappedin.DeserializableError : Swift.Hashable {}
extension Mappedin.Directions.Instruction.Turn.Bearing : Swift.Equatable {}
extension Mappedin.Directions.Instruction.Turn.Bearing : Swift.Hashable {}
